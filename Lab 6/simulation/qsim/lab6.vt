// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2021 21:47:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    block2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module block2_vlg_sample_tst(
	A,
	B,
	clock,
	data_in,
	ENABLE,
	FSM_Reset,
	Reset_A,
	Reset_B,
	sampler_tx
);
input [7:0] A;
input [7:0] B;
input  clock;
input  data_in;
input  ENABLE;
input  FSM_Reset;
input  Reset_A;
input  Reset_B;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or clock or data_in or ENABLE or FSM_Reset or Reset_A or Reset_B)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module block2_vlg_check_tst (
	firstfour,
	lastfour,
	sign,
	studentid,
	sampler_rx
);
input [0:6] firstfour;
input [0:6] lastfour;
input [0:6] sign;
input [0:6] studentid;
input sampler_rx;

reg [0:6] firstfour_expected;
reg [0:6] lastfour_expected;
reg [0:6] sign_expected;
reg [0:6] studentid_expected;

reg [0:6] firstfour_prev;
reg [0:6] lastfour_prev;
reg [0:6] sign_prev;
reg [0:6] studentid_prev;

reg [0:6] firstfour_expected_prev;
reg [0:6] lastfour_expected_prev;
reg [0:6] sign_expected_prev;
reg [0:6] studentid_expected_prev;

reg [0:6] last_firstfour_exp;
reg [0:6] last_lastfour_exp;
reg [0:6] last_sign_exp;
reg [0:6] last_studentid_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	firstfour_prev = firstfour;
	lastfour_prev = lastfour;
	sign_prev = sign;
	studentid_prev = studentid;
end

// update expected /o prevs

always @(trigger)
begin
	firstfour_expected_prev = firstfour_expected;
	lastfour_expected_prev = lastfour_expected;
	sign_expected_prev = sign_expected;
	studentid_expected_prev = studentid_expected;
end


// expected firstfour[ 6 ]
initial
begin
	firstfour_expected[6] = 1'bX;
end 
// expected firstfour[ 5 ]
initial
begin
	firstfour_expected[5] = 1'bX;
end 
// expected firstfour[ 4 ]
initial
begin
	firstfour_expected[4] = 1'bX;
end 
// expected firstfour[ 3 ]
initial
begin
	firstfour_expected[3] = 1'bX;
end 
// expected firstfour[ 2 ]
initial
begin
	firstfour_expected[2] = 1'bX;
end 
// expected firstfour[ 1 ]
initial
begin
	firstfour_expected[1] = 1'bX;
end 
// expected firstfour[ 0 ]
initial
begin
	firstfour_expected[0] = 1'bX;
end 
// expected lastfour[ 6 ]
initial
begin
	lastfour_expected[6] = 1'bX;
end 
// expected lastfour[ 5 ]
initial
begin
	lastfour_expected[5] = 1'bX;
end 
// expected lastfour[ 4 ]
initial
begin
	lastfour_expected[4] = 1'bX;
end 
// expected lastfour[ 3 ]
initial
begin
	lastfour_expected[3] = 1'bX;
end 
// expected lastfour[ 2 ]
initial
begin
	lastfour_expected[2] = 1'bX;
end 
// expected lastfour[ 1 ]
initial
begin
	lastfour_expected[1] = 1'bX;
end 
// expected lastfour[ 0 ]
initial
begin
	lastfour_expected[0] = 1'bX;
end 
// expected sign[ 6 ]
initial
begin
	sign_expected[6] = 1'bX;
end 
// expected sign[ 5 ]
initial
begin
	sign_expected[5] = 1'bX;
end 
// expected sign[ 4 ]
initial
begin
	sign_expected[4] = 1'bX;
end 
// expected sign[ 3 ]
initial
begin
	sign_expected[3] = 1'bX;
end 
// expected sign[ 2 ]
initial
begin
	sign_expected[2] = 1'bX;
end 
// expected sign[ 1 ]
initial
begin
	sign_expected[1] = 1'bX;
end 
// expected sign[ 0 ]
initial
begin
	sign_expected[0] = 1'bX;
end 
// expected studentid[ 6 ]
initial
begin
	studentid_expected[6] = 1'bX;
end 
// expected studentid[ 5 ]
initial
begin
	studentid_expected[5] = 1'bX;
end 
// expected studentid[ 4 ]
initial
begin
	studentid_expected[4] = 1'bX;
end 
// expected studentid[ 3 ]
initial
begin
	studentid_expected[3] = 1'bX;
end 
// expected studentid[ 2 ]
initial
begin
	studentid_expected[2] = 1'bX;
end 
// expected studentid[ 1 ]
initial
begin
	studentid_expected[1] = 1'bX;
end 
// expected studentid[ 0 ]
initial
begin
	studentid_expected[0] = 1'bX;
end 
// generate trigger
always @(firstfour_expected or firstfour or lastfour_expected or lastfour or sign_expected or sign or studentid_expected or studentid)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected firstfour = %b | expected lastfour = %b | expected sign = %b | expected studentid = %b | ",firstfour_expected_prev,lastfour_expected_prev,sign_expected_prev,studentid_expected_prev);
	$display("| real firstfour = %b | real lastfour = %b | real sign = %b | real studentid = %b | ",firstfour_prev,lastfour_prev,sign_prev,studentid_prev);
`endif
	if (
		( firstfour_expected_prev[0] !== 1'bx ) && ( firstfour_prev[0] !== firstfour_expected_prev[0] )
		&& ((firstfour_expected_prev[0] !== last_firstfour_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[0] = firstfour_expected_prev[0];
	end
	if (
		( firstfour_expected_prev[1] !== 1'bx ) && ( firstfour_prev[1] !== firstfour_expected_prev[1] )
		&& ((firstfour_expected_prev[1] !== last_firstfour_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[1] = firstfour_expected_prev[1];
	end
	if (
		( firstfour_expected_prev[2] !== 1'bx ) && ( firstfour_prev[2] !== firstfour_expected_prev[2] )
		&& ((firstfour_expected_prev[2] !== last_firstfour_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[2] = firstfour_expected_prev[2];
	end
	if (
		( firstfour_expected_prev[3] !== 1'bx ) && ( firstfour_prev[3] !== firstfour_expected_prev[3] )
		&& ((firstfour_expected_prev[3] !== last_firstfour_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[3] = firstfour_expected_prev[3];
	end
	if (
		( firstfour_expected_prev[4] !== 1'bx ) && ( firstfour_prev[4] !== firstfour_expected_prev[4] )
		&& ((firstfour_expected_prev[4] !== last_firstfour_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[4] = firstfour_expected_prev[4];
	end
	if (
		( firstfour_expected_prev[5] !== 1'bx ) && ( firstfour_prev[5] !== firstfour_expected_prev[5] )
		&& ((firstfour_expected_prev[5] !== last_firstfour_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[5] = firstfour_expected_prev[5];
	end
	if (
		( firstfour_expected_prev[6] !== 1'bx ) && ( firstfour_prev[6] !== firstfour_expected_prev[6] )
		&& ((firstfour_expected_prev[6] !== last_firstfour_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port firstfour[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", firstfour_expected_prev);
		$display ("     Real value = %b", firstfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_firstfour_exp[6] = firstfour_expected_prev[6];
	end
	if (
		( lastfour_expected_prev[0] !== 1'bx ) && ( lastfour_prev[0] !== lastfour_expected_prev[0] )
		&& ((lastfour_expected_prev[0] !== last_lastfour_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[0] = lastfour_expected_prev[0];
	end
	if (
		( lastfour_expected_prev[1] !== 1'bx ) && ( lastfour_prev[1] !== lastfour_expected_prev[1] )
		&& ((lastfour_expected_prev[1] !== last_lastfour_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[1] = lastfour_expected_prev[1];
	end
	if (
		( lastfour_expected_prev[2] !== 1'bx ) && ( lastfour_prev[2] !== lastfour_expected_prev[2] )
		&& ((lastfour_expected_prev[2] !== last_lastfour_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[2] = lastfour_expected_prev[2];
	end
	if (
		( lastfour_expected_prev[3] !== 1'bx ) && ( lastfour_prev[3] !== lastfour_expected_prev[3] )
		&& ((lastfour_expected_prev[3] !== last_lastfour_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[3] = lastfour_expected_prev[3];
	end
	if (
		( lastfour_expected_prev[4] !== 1'bx ) && ( lastfour_prev[4] !== lastfour_expected_prev[4] )
		&& ((lastfour_expected_prev[4] !== last_lastfour_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[4] = lastfour_expected_prev[4];
	end
	if (
		( lastfour_expected_prev[5] !== 1'bx ) && ( lastfour_prev[5] !== lastfour_expected_prev[5] )
		&& ((lastfour_expected_prev[5] !== last_lastfour_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[5] = lastfour_expected_prev[5];
	end
	if (
		( lastfour_expected_prev[6] !== 1'bx ) && ( lastfour_prev[6] !== lastfour_expected_prev[6] )
		&& ((lastfour_expected_prev[6] !== last_lastfour_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port lastfour[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", lastfour_expected_prev);
		$display ("     Real value = %b", lastfour_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_lastfour_exp[6] = lastfour_expected_prev[6];
	end
	if (
		( sign_expected_prev[0] !== 1'bx ) && ( sign_prev[0] !== sign_expected_prev[0] )
		&& ((sign_expected_prev[0] !== last_sign_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[0] = sign_expected_prev[0];
	end
	if (
		( sign_expected_prev[1] !== 1'bx ) && ( sign_prev[1] !== sign_expected_prev[1] )
		&& ((sign_expected_prev[1] !== last_sign_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[1] = sign_expected_prev[1];
	end
	if (
		( sign_expected_prev[2] !== 1'bx ) && ( sign_prev[2] !== sign_expected_prev[2] )
		&& ((sign_expected_prev[2] !== last_sign_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[2] = sign_expected_prev[2];
	end
	if (
		( sign_expected_prev[3] !== 1'bx ) && ( sign_prev[3] !== sign_expected_prev[3] )
		&& ((sign_expected_prev[3] !== last_sign_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[3] = sign_expected_prev[3];
	end
	if (
		( sign_expected_prev[4] !== 1'bx ) && ( sign_prev[4] !== sign_expected_prev[4] )
		&& ((sign_expected_prev[4] !== last_sign_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[4] = sign_expected_prev[4];
	end
	if (
		( sign_expected_prev[5] !== 1'bx ) && ( sign_prev[5] !== sign_expected_prev[5] )
		&& ((sign_expected_prev[5] !== last_sign_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[5] = sign_expected_prev[5];
	end
	if (
		( sign_expected_prev[6] !== 1'bx ) && ( sign_prev[6] !== sign_expected_prev[6] )
		&& ((sign_expected_prev[6] !== last_sign_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_expected_prev);
		$display ("     Real value = %b", sign_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sign_exp[6] = sign_expected_prev[6];
	end
	if (
		( studentid_expected_prev[0] !== 1'bx ) && ( studentid_prev[0] !== studentid_expected_prev[0] )
		&& ((studentid_expected_prev[0] !== last_studentid_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[0] = studentid_expected_prev[0];
	end
	if (
		( studentid_expected_prev[1] !== 1'bx ) && ( studentid_prev[1] !== studentid_expected_prev[1] )
		&& ((studentid_expected_prev[1] !== last_studentid_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[1] = studentid_expected_prev[1];
	end
	if (
		( studentid_expected_prev[2] !== 1'bx ) && ( studentid_prev[2] !== studentid_expected_prev[2] )
		&& ((studentid_expected_prev[2] !== last_studentid_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[2] = studentid_expected_prev[2];
	end
	if (
		( studentid_expected_prev[3] !== 1'bx ) && ( studentid_prev[3] !== studentid_expected_prev[3] )
		&& ((studentid_expected_prev[3] !== last_studentid_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[3] = studentid_expected_prev[3];
	end
	if (
		( studentid_expected_prev[4] !== 1'bx ) && ( studentid_prev[4] !== studentid_expected_prev[4] )
		&& ((studentid_expected_prev[4] !== last_studentid_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[4] = studentid_expected_prev[4];
	end
	if (
		( studentid_expected_prev[5] !== 1'bx ) && ( studentid_prev[5] !== studentid_expected_prev[5] )
		&& ((studentid_expected_prev[5] !== last_studentid_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[5] = studentid_expected_prev[5];
	end
	if (
		( studentid_expected_prev[6] !== 1'bx ) && ( studentid_prev[6] !== studentid_expected_prev[6] )
		&& ((studentid_expected_prev[6] !== last_studentid_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port studentid[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", studentid_expected_prev);
		$display ("     Real value = %b", studentid_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_studentid_exp[6] = studentid_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#180000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module block2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg [7:0] B;
reg clock;
reg data_in;
reg ENABLE;
reg FSM_Reset;
reg Reset_A;
reg Reset_B;
// wires                                               
wire [0:6] firstfour;
wire [0:6] lastfour;
wire [0:6] sign;
wire [0:6] studentid;

wire sampler;                             

// assign statements (if any)                          
block2 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.clock(clock),
	.data_in(data_in),
	.ENABLE(ENABLE),
	.firstfour(firstfour),
	.FSM_Reset(FSM_Reset),
	.lastfour(lastfour),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sign(sign),
	.studentid(studentid)
);
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b1;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b1;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b1;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b1;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b0;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 

// clock
initial
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
	clock = #10000 1'b0;
	clock = #10000 1'b1;
end 

// data_in
initial
begin
	data_in = 1'b0;
	data_in = #20000 1'b1;
end 

// ENABLE
initial
begin
	ENABLE = 1'b1;
end 

// FSM_Reset
initial
begin
	FSM_Reset = 1'b1;
	FSM_Reset = #10000 1'b0;
end 

// Reset_A
initial
begin
	Reset_A = 1'b1;
end 

// Reset_B
initial
begin
	Reset_B = 1'b1;
end 

block2_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.clock(clock),
	.data_in(data_in),
	.ENABLE(ENABLE),
	.FSM_Reset(FSM_Reset),
	.Reset_A(Reset_A),
	.Reset_B(Reset_B),
	.sampler_tx(sampler)
);

block2_vlg_check_tst tb_out(
	.firstfour(firstfour),
	.lastfour(lastfour),
	.sign(sign),
	.studentid(studentid),
	.sampler_rx(sampler)
);
endmodule

